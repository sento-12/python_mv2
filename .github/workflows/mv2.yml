name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run-script:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      selenium:
        image: selenium/standalone-chrome
        ports:
          - 4444:4444

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: pip install selenium gspread beautifulsoup4 gspread google-auth google-auth-oauthlib google-auth-httplib2 oauth2client
      
    - name: Download Chrome 135
      run: |
        wget -q -O chrome.zip "https://storage.googleapis.com/chrome-for-testing-public/135.0.7049.42/linux64/chrome-linux64.zip"
        unzip chrome.zip
        ls -R  # Debugging: Check extracted files
        sudo mv chrome-linux64 /opt/google/chrome-135
        sudo ln -sf /opt/google/chrome-135/chrome /usr/bin/google-chrome

    - name: Install ChromeDriver
      run: |
        sudo apt update
        sudo apt install -y wget unzip
        wget -q -O chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/135.0.7049.42/linux64/chromedriver-linux64.zip
        # Check if the file was downloaded
        if [ ! -f chromedriver.zip ]; then
          echo "ChromeDriver download failed. Exiting."
          exit 1
        fi
          unzip chromedriver.zip
          # ls -R  # Debugging: List extracted files
          sudo mv chromedriver-linux64/chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromedriver --version
          
    - name: Set up Google Credentials
      run: echo '${{ secrets.GOOGLE_CREDENTIALS }}' > service_account.json

    - name: Start Virtual Display (Xvfb)
      run: Xvfb :99 -screen 0 1920x1080x24 &

    - name: Set Display Environment Variable
      run: echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Start Screen Recording
      run: |
        ffmpeg -video_size 1920x1080 -framerate 10 -f x11grab -i :99 -y screen_recording.mp4 &
        echo $! > ffmpeg_pid

    - name: Run Your Scraper in Non-Headless Mode
      run: python TV_Scrapping.py

    - name: Stop Screen Recording
      if: always()
      run: |
        kill $(cat ffmpeg_pid) || true
        sleep 5

    - name: Upload Recording as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: screen_recording
        path: screen_recording.mp4

    - name: Run Python Script
      run: |
        python TV_Scrapping.py

