import{D as g}from"./index-BvC-IA6J.js";import{T as S,p as w,ak as y,O as h,a as k,s as v,m as C,al as E,l as x,af as u}from"./index-DbtAbjfk.js";import{InlineCardInteractionContextToken as m,InlineCardViewContainerToken as D}from"./index-D2JXN8Q7.js";import"./PluginModule-CRib3PLZ-ls39AzbW.js";var _=(r,e)=>(e=Symbol[r])?e:Symbol.for("Symbol."+r),f=r=>{throw TypeError(r)},V=(r,e,t)=>{if(e!=null){typeof e!="object"&&typeof e!="function"&&f("Object expected");var a;a===void 0&&(a=e[_("dispose")]),typeof a!="function"&&f("Object not disposable"),r.push([t,a,e])}return e},I=(r,e,t)=>{var a=typeof SuppressedError=="function"?SuppressedError:function(o,i,p,c){return c=Error(p),c.name="SuppressedError",c.error=o,c.suppressed=i,c},s=o=>e=t?new a(o,e,"An error was suppressed during disposal"):(t=!0,o),n=o=>{for(;o=r.pop();)try{var i=o[1]&&o[1].call(o[2]);if(o[0])return Promise.resolve(i).then(n,p=>(s(p),n()))}catch(p){s(p)}if(t)throw e};return n()};const M=r=>S(async e=>{var t=[];try{const n=V(t,new DisposableStack),o=r.getExecutionScopeDefinition("document-session"),i=r.getExecutionScopeDefinition("inline-card-interaction");n.use(await e(r.registerExecutionScopeReviver("inline-card-interaction",(l,d,b)=>(l.register({token:m,useValue:b}),l.start()))));const p=await e(r.getPlugin("ui")),c=new g;return n.use(await e(o.register({token:D,useValue:c}))),n.use(o.onStart(l=>T(l,p,c))),n.use(i.onStart(l=>R(l))),n.use(i.onStop(l=>(c.clear(),w(l.resolve(y),h,k(d=>d.hide()))))),v(n.move())}catch(n){var a=n,s=!0}finally{I(t,a,s)}});async function T(r,e,t){const a=()=>{var s;const o=(s=u.useSyncExternalStore(t.subscribe,t.getSnapshot).default)!=null?s:[];return u.createElement("div",{style:{borderRadius:"4px",backgroundColor:"red",color:"white",boxShadow:"0 2px 4px rgba(0, 0, 0, 0.1)",padding:"8px"}},o.map(i=>u.cloneElement(i.view,{key:i.key})))};return w(r.resolve(e.provides.MainViewContainer),C(s=>s.add(a,{slot:"default"})))}async function R(r){return S(async e=>{const t=await e(r.resolve(y)),a=await e(r.resolve(m));return await e(t.setScreenPosition(a.position)),await e(t.show()),v(E(async()=>{const s=await t.hide();s.ok||x.error("Failed to hide the inline card window",s.error)}))})}export{M as activate};
//# sourceMappingURL=index-AqxJQZM-.js.map
