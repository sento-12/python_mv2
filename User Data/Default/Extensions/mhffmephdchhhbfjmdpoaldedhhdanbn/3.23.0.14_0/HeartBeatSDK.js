!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.HeartbeatSDK=t():e.HeartbeatSDK=t()}(self,(()=>(()=>{"use strict";var e={d:(t,i)=>{for(var n in i)e.o(i,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:i[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{default:()=>x});const i={DATA_SOURCE_OPTIONS:{portal:"WEB_APPLICATION",mobile:"MOBILE_APPLICATION",extension:"BROWSER_EXTENSION"},TELEMETRYSCD:{GOOGLE_ANALYTICS_URL:"https://www.google-analytics.com/collect",REQUEST_TYPE:"POST"},TELEMETRYDEFAULTPARAMETERS:{APPLICATION_NAME:"an",APPLICATION_VERSION:"av",CLIENT_ID:"cid",DATA_SOURCE:"ds",TRACKING_ID:"tid",USER_LANGUAGE:"ul",GOOGLE_ANALYTICS_PROTOCOL_VERSION:"v",ANONYMIZE_IP:"aip",EVENT_CATEGORY:"ec",EVENT_ACTION:"ea",TYPE:"t",CLIENT_ID_CUSTOM_DIMENSION:SymBfw.telemetryConstants.parameters.CUSTOM_DIMENSION2,BROWSER_NAME:SymBfw.telemetryConstants.parameters.CUSTOM_DIMENSION6},TELEMETRY_CONSTANTS:{INSTALL_PING:"Install",HEART_BEAT_PING:"HeartBeat",USER_BASE:"UserBase",EVENT:"event"},CONTAINER_NAME:"HEARTBEAT_SDK_CONTAINER",INSTALL_PING_STATUS_KEY:"installPingStatusKey",INSTALL_NORTON_PING_STATUS_KEY:"nortonInstallPingStatusKey",INSTALL_PING_STATUS:{ALREADY_SENT:"0",SUCCESS:"1",FAILED:"2"},HB_LASTUPDATETIME_KEY:"hbLastUpdateTimeKey",NORTON_HB_LASTUPDATETIME_KEY:"nortonHBLastUpdateTimeKey",HB_POLLING_TIME:18e5,HB_POLLING_TIME_IN_MINUTES:30,HB_TELEMETRY_UNKNOWN:"unknown",HB_TELEMETRY_ENABLED:"enabled",HB_TELEMETRY_DISABLED:"disabled",NORTON_TELEMETRY_PARAMETERS:{PRODUCT:"product",VERSION:"version",ENABLED:"enabled",TRANSPORT:"transport",MODULE:"module",CLIENT_TRIGGER_TIME:"ctt",CLIENT_SENT_TIME:"cst",PING_TYPE:"E"},NORTON_TELEMETRY_CONFIGS:{SEND_ATTEMPTS:1,RETRY_INTERVAL:5e3,PING_TYPES:{INSTALL:"install",HEARTBEAT:"heartbeat"}},HB_ALARM_NAME:"b5c1d0df-513c-4592-aad4-71cb3c603c16"},{Logger:n}=trackingServerSDK,a=new class{constructor(){this.logger=void 0}init(e){this.logger=new n(e)}},{isNil:r}=SymBfw.utils,{telemetrySettings:s}=SymBfw,{TrackingServerAnalyticsFacade:l}=trackingServerSDK,o="error",c=new class{constructor(){this.superParams={},this.eventSpecificParams={},this.trackingServerAnalyticsFacade=null}async init(e){if(r(e)||0===Object.keys(e).length)throw new Error("configObj cannot be null");{this.superParams=e.superParams,this.eventSpecificParams=e.eventSpecificParams;const t={getDynamicTelemetryParams:e.getDynamicTelemetryParams};try{const e=this.superParams,i=this.eventSpecificParams,n={...e,...i};return this.trackingServerAnalyticsFacade=new l(n,void 0,t),a.init(e.build_type),!0}catch(e){return!1}}}async send(e){if(e){const t={event:e,...this.eventSpecificParams,telemetry_enabled:s.isTelemetryEnabled()};let i=!1;try{i=await this.trackingServerAnalyticsFacade.forceSendImmediate(t)}catch(e){return Promise.reject("tracking server sdk rejected the telemetry event")}return i?Promise.resolve("telemetry sent successfully"):Promise.reject("Error in sending telemetry")}throw new Error("event name cannot be null")}sendLog(e,t){if(t)return"warning"===e?this.trackingServerAnalyticsFacade.sendWarningLog(t):this.trackingServerAnalyticsFacade.sendErrorLog(t);throw new Error("log cannot be null")}},{isObject:h,isFunction:d,isString:g}=SymBfw.utils,{error:_}=SymBfw.logger;class u{constructor(){this._prodName=null,this._prodVersion=null,this._machineId=null,this._dataSource=null,this._apiKey=null,this._userLang=null,this._retryIntervalMillis=864e5,this.install={},this.install.isInstallPingEnabled=!0,this.install.isFreshInstall=null,this.heartBeat={},this.heartBeat.isHeartBeatPingEnabled=!0,this.heartBeat.heartBeatIntervalInMilliSec=null,this._isLocalStorageNeeded=!1,this.superParams={},this.eventSpecificParams={}}set prodName(e){this._prodName=e}get prodName(){return this._prodName}set prodVersion(e){this._prodVersion=e}get prodVersion(){return this._prodVersion}set machineId(e){this._machineId=e}get machineId(){return this._machineId}set apiKey(e){this._apiKey=e}get apiKey(){return this._apiKey}set dataSource(e){this._dataSource=i.DATA_SOURCE_OPTIONS[e]}get dataSource(){return this._dataSource}set userLanguage(e){this._userLang=e}get userLanguage(){return this._userLang}set retryIntervalMillis(e){this._retryIntervalMillis=e}get retryIntervalMillis(){return this._retryIntervalMillis}set isInstallPingEnabled(e){this.install.isInstallPingEnabled=e}get isInstallPingEnabled(){return this.install.isInstallPingEnabled}set isFreshInstall(e){this.install.isFreshInstall=e}get isFreshInstall(){return this.install.isFreshInstall}set isHeartBeatPingEnabled(e){this.heartBeat.isHeartBeatPingEnabled=e}get isHeartBeatPingEnabled(){return this.heartBeat.isHeartBeatPingEnabled}set heartBeatIntervalInMilliSec(e){this.heartBeat.heartBeatIntervalInMilliSec=e}get heartBeatIntervalInMilliSec(){return this.heartBeat.heartBeatIntervalInMilliSec}set isLocalStorageNeeded(e){this._isLocalStorageNeeded=e}get isLocalStorageNeeded(){return this._isLocalStorageNeeded}set additionalInstallPingParams(e){if(h(e)){for(const[t,i]of Object.entries(e))g(t)||(_("custom dimension value should be a string"),c.sendLog(o,"custom dimension value should be a string")),d(i)||(_(`${i} is not a function`),c.sendLog(o,`${i} is not a function`));this._additionalInstallPingParams=e}}get additionalInstallPingParams(){return this._additionalInstallPingParams}set additionalHeartBeatPingParams(e){if(h(e)){for(const[t,i]of Object.entries(e))g(t)||(_("custom dimension value should be a string"),c.sendLog(o,"custom dimension value should be a string")),d(i)||(_(`${i} is not a function`),c.sendLog(o,`${i} is not a function`));this._additionalHeartBeatPingParams=e}}get additionalHeartBeatPingParams(){return this._additionalHeartBeatPingParams}}class E{async perform(){throw new Error("Derived class needs to implement this function")}}const m=Object.freeze(new class{constructor(){this._container={}}get container(){return this._container.storage}set container(e){this._container.storage=e}get isLocalStorageNeeded(){return this._container.isLocalStorageNeeded}set isLocalStorageNeeded(e){this._container.isLocalStorageNeeded=e}loadContainer(e){return new Promise(((t,n)=>{this.isLocalStorageNeeded=e,this.isLocalStorageNeeded?(this.container=window.localStorage,t(!0)):SymBfw.settings.loadSettingsContainer(i.CONTAINER_NAME,!0,((e,i,a)=>{(!1===e||SymBfw.utils.isNil(i))&&n(a),this.container=i,t(!0)}))}))}getContainerByName(e){if(SymBfw.utils.isNil(e)||SymBfw.utils.isNil(this.container))throw new Error("Unable to retrieve the container value");return this.isLocalStorageNeeded?this.container.getItem(e):this.container.getObject(e)}setContainerByName(e,t){if(SymBfw.utils.isNil(e)||SymBfw.utils.isNil(this.container))throw new Error("Unable to set the container value");this.isLocalStorageNeeded?this.container.setItem(e,t):this.container.setObject(e,t)}}),T=m,{isNil:S}=SymBfw.utils,N=i.TELEMETRYDEFAULTPARAMETERS,I=new class{constructor(){this.defaultParameters={},this.prodName=null,this.prodVersion=null,this.machineId=null,this.dataSource=null,this.apiKey=null,this.userLang=null}init(e){if(S(e)||0===Object.keys(e).length)throw new Error("configObj cannot be null");this.prodName=e.prodName,this.prodVersion=e.prodVersion,this.machineId=e.machineId,this.dataSource=e.dataSource,this.apiKey=e.apiKey,this.userLang=e.userLanguage}_constructQueryParams(e){let t="";for(const[i,n]of Object.entries(e))t+=`${i}=${n}&`;return t=t.substring(0,t.length-1),t}_constructDefaultParams(){let e=null;return this.defaultParameters={[N.APPLICATION_NAME]:this.prodName,[N.APPLICATION_VERSION]:this.prodVersion,[N.CLIENT_ID]:this.machineId,[N.DATA_SOURCE]:this.dataSource,[N.TRACKING_ID]:this.apiKey,[N.USER_LANGUAGE]:this.userLang,[N.GOOGLE_ANALYTICS_PROTOCOL_VERSION]:1,[N.ANONYMIZE_IP]:1,[N.TYPE]:i.TELEMETRY_CONSTANTS.EVENT,[N.CLIENT_ID_CUSTOM_DIMENSION]:this.machineId,[N.BROWSER_NAME]:SymBfw.globals.BROWSER},e=this._constructQueryParams(this.defaultParameters),e}async send(e){let t;if(S(e))return Promise.reject("parameters are required for sending telemetry events");t=this._constructDefaultParams(),t+=`&${this._constructQueryParams(e)}`;const n={method:i.TELEMETRYSCD.REQUEST_TYPE,body:t};try{return 200===(await fetch(i.TELEMETRYSCD.GOOGLE_ANALYTICS_URL,n)).status?Promise.resolve("telemetry sent successfully"):Promise.reject("Error in sending telemetry")}catch(e){return Promise.reject("Error in sending telemetry")}}},{TelemetryEventNames:P}=trackingServerSDK,{alarmHelper:y,utils:{isntNil:p}}=SymBfw;class L extends E{constructor(){super(),this._containerKeyName=null,this._hbPingInterval=null,this._hbPingRetryInterval=null,this._updateInterval=null,this._additionalHeartBeatPingParams=null}_getCurrentUTCTimestamp(){return Math.floor((new Date).getTime())}_checkPingTimeArrived(){const e=JSON.parse(T.getContainerByName(this._containerKeyName));return!!SymBfw.utils.isNil(e)||e+this._hbPingInterval<this._getCurrentUTCTimestamp()}async _constructHeartBeatPing(){const e={[i.TELEMETRYDEFAULTPARAMETERS.EVENT_CATEGORY]:i.TELEMETRY_CONSTANTS.USER_BASE,[i.TELEMETRYDEFAULTPARAMETERS.EVENT_ACTION]:i.TELEMETRY_CONSTANTS.HEART_BEAT_PING};if(p(this._additionalHeartBeatPingParams))for(const[t,i]of Object.entries(this._additionalHeartBeatPingParams))e[t]=await i();return e}async perform(e){if(SymBfw.utils.isEmptyObject(e))throw new Error("HeartBeat ping configuration is empty");if(this._containerKeyName=i.HB_LASTUPDATETIME_KEY,this._hbPingInterval=e.heartBeatIntervalInMilliSec,this._hbPingRetryInterval=e.retryIntervalMillis,this._updateInterval=e.heartBeatIntervalInMilliSec,this._additionalHeartBeatPingParams=e._additionalHeartBeatPingParams||null,e.isHeartBeatPingEnabled)try{await this._sendHeartBeatPing()}catch(e){SymBfw.logger.error("Failed to send the Telemetry"),c.sendLog(o,"Failed to send the Telemetry")}}async _registerScheduler(){await y.setAlarm(i.HB_ALARM_NAME,{periodInMinutes:i.HB_POLLING_TIME_IN_MINUTES})}async _sendHeartBeatPing(){if(this._checkPingTimeArrived()){const e=await this._constructHeartBeatPing();try{await c.send(P.extnHeartBeat),T.setContainerByName(this._containerKeyName,this._getCurrentUTCTimestamp())}catch(e){SymBfw.logger.debug("Failed to send the GA Telementry and retry interval set"),a.logger.debug("Failed to send the GA Telementry and retry interval set")}try{await I.send(e),T.setContainerByName(this._containerKeyName,this._getCurrentUTCTimestamp())}catch(e){SymBfw.logger.debug("Failed to send the Telementry and retry interval set"),a.logger.debug("Failed to send the Telementry and retry interval set")}}this._registerScheduler()}}const{TelemetryEventNames:A}=trackingServerSDK,{utils:f}=SymBfw;class O extends E{constructor(){super(),this._container=null,this._additionalInstallPingParams=null}get container(){return this._container}set container(e){this._container=e}async perform(e){if(f.isEmptyObject(e))throw new Error("Install Ping configuration is missing");return!!e.isInstallPingEnabled&&(this.container=T,this._canTriggerInstallPing(e)&&(this._additionalInstallPingParams=e._additionalInstallPingParams,await this._sendInstallPing()),!0)}_canTriggerInstallPing(e){const{isFreshInstall:t}=e;let n=!1;const a=this.container.getContainerByName(i.INSTALL_PING_STATUS_KEY);if(f.isNil(a)){if(t)return!0;this.container.setContainerByName(i.INSTALL_PING_STATUS_KEY,i.INSTALL_PING_STATUS.ALREADY_SENT)}else i.INSTALL_PING_STATUS.FAILED===a&&(n=!0);return n}async _sendInstallPing(){const e=await this._constructInstallPing();let t=null;try{await c.send(A.extnInstall),t=i.INSTALL_PING_STATUS.SUCCESS}catch(e){t=i.INSTALL_PING_STATUS.FAILED}finally{this.container.setContainerByName(i.INSTALL_PING_STATUS_KEY,t)}try{await I.send(e),t=i.INSTALL_PING_STATUS.SUCCESS}catch(e){null===t&&(t=i.INSTALL_PING_STATUS.FAILED)}finally{this.container.setContainerByName(i.INSTALL_PING_STATUS_KEY,t)}}async _constructInstallPing(){const e={[i.TELEMETRYDEFAULTPARAMETERS.EVENT_CATEGORY]:i.TELEMETRY_CONSTANTS.USER_BASE,[i.TELEMETRYDEFAULTPARAMETERS.EVENT_ACTION]:i.TELEMETRY_CONSTANTS.INSTALL_PING};if(f.isntNil(this._additionalInstallPingParams))for(const[t,i]of Object.entries(this._additionalInstallPingParams))e[t]=await i();return e}}const{utils:B}=SymBfw,w=new class{constructor(){this.hbConfigs=null,this.handleSchedulerEvent=this.handleSchedulerEvent.bind(this)}async init(e){if(!(e instanceof u&&this._isValidConfigObj(e)))throw new TypeError("HeartBeat SDK initialization Failed - Invalid Configuration Object");try{const{isLocalStorageNeeded:t}=e;await T.loadContainer(t),I.init(e),c.init(e),(new O).perform(e),(new L).perform(e),this._storeHBConfig(e)}catch(e){SymBfw.logger.error("HB initialization Failed :",e.message),c.sendLog(o,`HB initialization Failed : ${e.message}`)}}_storeHBConfig(e){!e.isInstallPingEnabled&&e.isHeartBeatPingEnabled&&(this.hbConfigs=e)}_isValidConfigObj(e){const t=Object.values(e);for(const e in t)if(t[e]instanceof Object){if(!this._isValidConfigObj(t[e]))return!1}else if(B.isNil(t[e]))return!1;return!0}async handleSchedulerEvent(e){e&&e.name&&e.name===i.HB_ALARM_NAME&&(B.isNil(this.hbConfigs)||await this.init(this.hbConfigs))}};SymBfw.alarmHelper.registerAlarmListener(w.handleSchedulerEvent);const{isObject:R,isFunction:b,isString:C}=SymBfw.utils,{error:v}=SymBfw.logger;class M{constructor(){this._prodName=null,this._prodVersion=null,this._machineId=null,this._dataSource=null,this._apiKey=null,this._userLanguage=null,this._isLocalStorageNeeded=!1,this._pingIntervalInMillis=null,this._isMOTEnabled=null,this._pingName=null,this._pingData=null}set prodName(e){this._prodName=e}get prodName(){return this._prodName}set prodVersion(e){this._prodVersion=e}get prodVersion(){return this._prodVersion}set machineId(e){this._machineId=e}get machineId(){return this._machineId}set apiKey(e){this._apiKey=e}get apiKey(){return this._apiKey}set dataSource(e){this._dataSource=i.DATA_SOURCE_OPTIONS[e]}get dataSource(){return this._dataSource}set userLanguage(e){this._userLanguage=e}get userLanguage(){return this._userLanguage}set isLocalStorageNeeded(e){this._isLocalStorageNeeded=e}get isLocalStorageNeeded(){return this._isLocalStorageNeeded}set pingIntervalInMillis(e){this._pingIntervalInMillis=e}get pingIntervalInMillis(){return this._pingIntervalInMillis}set isMOTEnabled(e){this._isMOTEnabled=e}get isMOTEnabled(){return this._isMOTEnabled}set pingName(e){this._pingName=e}get pingName(){return this._pingName}set pingData(e){this._pingData=e}get pingData(){return this._pingData}set additionalRecurrentPingParams(e){if(R(e)){for(const[t,i]of Object.entries(e))C(t)||(v("custom dimension value should be a string"),c.sendLog(o,"custom dimension value should be a string")),b(i)||(v(`${i} is not a function`),c.sendLog(o,`${i} is not a function`));this._additionalRecurrentPingParams=e}}get additionalRecurrentPingParams(){return this._additionalRecurrentPingParams}}const{isNil:D,isntNil:U,isInteger:H,isString:j,isObject:K,isEmptyObject:Y}=SymBfw.utils;class G extends E{constructor(){super(),this._containerKeyName=null,this._hbRecurrentPingInterval=null,this._pingData=null,this._pollTimer=null,this._additionalRecurrentPingParams=null}init(e){if(Y(e))throw new Error("recurrentPingConfig cannot be null");if(!H(e._pingIntervalInMillis))throw new Error("ping interval should be an integer");if(!j(e._pingName))throw new Error("invalid ping name");if(!K(e._pingData))throw new Error("invalid ping data");this._hbRecurrentPingInterval=e._pingIntervalInMillis,this._pingData=e._pingData,this._containerKeyName=`${e._pingName}_lastupdatetime`,this._additionalRecurrentPingParams=e._additionalRecurrentPingParams}async _constructPingData(){const e=this._pingData;if(U(this._additionalRecurrentPingParams))for(const[t,i]of Object.entries(this._additionalRecurrentPingParams))e[t]=await i();return e}_checkPingTimeReached(){const e=JSON.parse(T.getContainerByName(this._containerKeyName));return!!D(e)||e+this._hbRecurrentPingInterval<this._getCurrentUTCTimestamp()}async perform(){this._checkPingTimeReached()&&(this._pingData=await this._constructPingData(),await this._sendTelemetry()),this._pollTimer=setTimeout((()=>{this.perform()}),i.HB_POLLING_TIME)}async _sendTelemetry(){try{await I.send(this._pingData),T.setContainerByName(this._containerKeyName,this._getCurrentUTCTimestamp())}catch(e){SymBfw.logger.error("Failed to send the recurrent ping and retry interval set"),c.sendLog(o,"Failed to send the recurrent ping and retry interval set")}}stop(){U(this._pollTimer)&&(clearTimeout(this._pollTimer),this._pollTimer=null)}_getCurrentUTCTimestamp(){return Math.floor((new Date).getTime())}}const{isString:F,isNil:V,isEmptyObject:k}=SymBfw.utils,$=new class{constructor(){this._pingObjMap={}}async init(){}async createPing(e){if(!(e instanceof M))throw new TypeError("Active vault user ping initialization failed - Invalid Configuration Object");if(V(e._isLocalStorageNeeded)||V(e._pingName))throw new Error("config object values cannot be empty");try{const{isLocalStorageNeeded:t}=e;if(await T.loadContainer(t),!k(this._pingObjMap[e._pingName]))throw new Error(`${e._pingName} already exists`);const i=new G;i.init(e),this._pingObjMap[e._pingName]=i,I.init(e)}catch(e){SymBfw.logger.error("Recurrent Ping Creation Failed :",e.message),c.sendLog(o,`Recurrent Ping Creation Failed : ${e.message}`)}}start(e){if(!F(e))throw new Error("Invalid ping name");const t=this._pingObjMap[e];if(k(t))throw new Error("Invalid ping object");t.perform()}stop(e){if(!F(e))throw new Error("Invalid ping name");const t=this._pingObjMap[e];if(k(t))throw new Error("Invalid ping object");t.stop()}},x={hbManager:w,HBConfig:u,HBRecurrentPingConfig:M,hbRecurrentPingManager:$};return t.default})()));